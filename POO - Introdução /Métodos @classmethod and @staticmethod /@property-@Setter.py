# @property + @setter - getter e setter no modo Pyth√¥nico
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# Atributos que come√ßar com um ou dois underlines
# n√£o devem ser usados fora da classe.
#  üêçü§ìü§Øü§Øü§Øü§Ø

class Caneta:
    def __init__(self, cor):

        # private protected
        self.cor = cor
        self._cor_tampa = None

# >>>>>>>>>>
# se tiver "_" antes de algo como ._cor √© uma
# conven√ß√£o entre devs que n√£o se pode modificar esse
# atributo  ( 1 ou 2 --> "_" ou "__" )
# N√ÉO DEVEM SER USADOS FORA DA CLASSE, NEM EM PRINT, NEM EM NADA... S√ì PD AQUI
#>>>>>>>>>

# N√£o use oq disse acima, use como se fosse atributo isso abaixo 

    @property 
# aqui √© s√≥ um m√©todo que parece se comportar como atributo "caneta.cor = algo >> d√° errado pois √© um m√©todo <<<
# Vc pd usar como atributo, como ta nas 2 primeiras linhas com inst√¢ncia e print 

    def cor(self):
        print('ESTOU NO GETTER')
        return self._cor

# abaixo: Aqui vc usa atribuindo valor mesmo devido ter o cor.setter 

    @cor.setter
# assim posso atribuir no codigo, pois d√° op√ß√£o de setter 
# aqui salva valor com o setter

    def cor(self, valor):
        print('ESTOU NO SETTER')
        self._cor = valor

# Property = getter  (pega informa√ß√£o)

    @property
    def cor_tampa(self):
        return self._cor_tampa

# Setter = Libera atribuir dados manualmente
    @cor_tampa.setter
    def cor_tampa(self, valor):
        self._cor_tampa = valor


caneta = Caneta('Azul')
print(caneta.cor)

# Depois do setter 

caneta.cor = 'Rosa'
caneta.cor_tampa = 'Azul'

print(caneta.cor)
print(caneta.cor_tampa)