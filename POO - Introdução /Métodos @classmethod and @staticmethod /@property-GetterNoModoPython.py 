# @property - um getter no modo Pyth√¥nico
# getter - um m√©todo para obter um atributo
# cor -> get_cor()
# modo pyth√¥nico - modo do Python de fazer coisas
# @property √© uma propriedade do objeto, ela
# √© um m√©todo que se comporta como um
# atributo ü§Ø ü§Ø ü§Ø

# Geralmente √© usada nas seguintes situa√ß√µes:
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo
# C√≥digo cliente - √© o c√≥digo que usa seu c√≥digo



class Caneta:
    def __init__(self, cor):
        self.cor_tinta = cor

    @property # Faz se torna "atributo" e n√£o precisa de (), mas esse atributo n √©  poss√≠vel ser nomeado " .cor = algo "
    def cor(self): # .cor, vai retornar isso
        print('PROPERTY')
        return self.cor_tinta

# Os cliente vai usar o atributo, e toda vez que eu alterar algo dentro da classe como o cor_tinta e no self.cor_tinta √© s√≥ mudar dentro do property e l√° em cima e como o cliente chama apenas o atributo o nome continua o mesmo ( s√≥ atualizou coisas internas que chama automaticamente mesmo editando ) 

    @property
    def cor_tampa(self):
        return 123456

# # #########################


caneta = Caneta('Azul')
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor)
print(caneta.cor_tampa)

# O @property transforma a fun√ß√£o/m√©todo  que executava com () e deixa executar "como se fosse atributo". Se a fun√ß√£o retorna valores, com a inst√¢ncia.funcaoQue√âatributoAgora n√£o precisa por mais instancia.fun√ß√£o(). 

# Mas eu j√° n√£o conseguia exibir de todo jeito? 
#Mas fazendo isso eu consifo usar o setter, evito 
#dor de cabe√ßa com quebra de c√≥digo pois deixo a 
#vari√°vel principal privada e o usu√°rio apenas 
#utiliza uma p√∫blica que vai retornar a original 
#( ou seja posso sempre muda o nome da original 
#que vai ficar retornada mesmo assim pela aquela 
#que √© p√∫blica ) 




# ####################################

# class Caneta:
#     def __init__(self, cor):
#         self.cor_tinta = cor

#     def get_cor(self):
#         print('GET COR')
#         return self.cor_tinta

# Os cliente vai usar a fun√ß√£o, e toda vez que eu alterar algo dentro da fun√ß√£o como o cor_tinta e no self.cor_tinta √© s√≥ mudar dentro da fun√ß√£o e l√° em cima e como o cliente chama apenas a fun√ß√£o o nome continua o mesmo ( s√≥ atualizou coisas internas que chama automaticamente mesmo editando ) 



# ###########################


# caneta = Caneta('Azul')
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())
# print(caneta.get_cor())