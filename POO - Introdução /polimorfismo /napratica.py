# Polimorfismo em Python Orientado a Objetos
# Polimorfismo √© o princ√≠pio que permite que
# classes deridavas de uma mesma superclasse
# tenham m√©todos iguais (com mesma assinatura)
# mas comportamentos diferentes.
# Assinatura do m√©todo = Mesmo nome e quantidade
# de par√¢metros (retorno n√£o faz parte da assinatura)
# Opini√£o + princ√≠pios que contam:
# Assinatura do m√©todo: nome, par√¢metros e retorno iguais
# SO"L"ID
# Princ√≠pio da substitui√ß√£o de liskov
# Objetos de uma superclasse devem ser substitu√≠veis
# por objetos de uma subclasse sem quebrar a aplica√ß√£o.
# Sobrecarga de m√©todos (overload)  üêç = ‚ùå
# Sobreposi√ß√£o de m√©todos (override) üêç = ‚úÖ

# C√≥digo abaixo

from abc import ABC, abstractmethod

# Por que abstrato? 
# A Notifica√ß√£o pode ser sms, email, WhatsApp,
# Notifica√ß√£o do pr√≥prio celular, cartorio. Ent√£o √© abstrato. 
# Usamos esse from abc import ABC, abstractmethod
# Classe abstrata possui atributos similares,
# mas que tem funcionalidades diferentes dependendo da situa√ß√£o 
# ( Ex: FiguraPlana tem √°rea indefinida com pass, Ret√¢ngulo --> √°rea definida ) 


class Notificacao(ABC):
    def __init__(self, mensagem):
        self.mensagem = mensagem # isso √© um atributo

    @abstractmethod
    def enviar(self) -> bool: ...
# Abstrato pois as subclasses que v√£o definir o tipo de notifica√ß√£o a ser enviada


class NotificacaoEmail(Notificacao):
    def enviar(self) -> bool:
        print('E-mail: enviando - ', self.mensagem)
        return True


class NotificacaoSMS(Notificacao):
    def enviar(self) -> bool:
        print('SMS: enviando - ', self.mensagem)
        return False


def notificar(notificacao: Notificacao):
    notificacao_enviada = notificacao.enviar()

    if notificacao_enviada:
        print('Notifica√ß√£o enviada')
    else:
        print('Notifica√ß√£o N√ÉO enviada')


notificacao_email = NotificacaoEmail('testando e-mail')
notificar(notificacao_email)

notificacao_sms = NotificacaoSMS('testando SMS')
notificar(notificacao_sms)